        // Definir o logContainer
        const logContainer = document.getElementById("log-container");

        // Verifica o protocolo da p√°gina (HTTPS ou HTTP)
        const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";

        // Cria a conex√£o WebSocket com seguran√ßa (WSS para HTTPS)
        let ws = new WebSocket(`${protocol}//${window.location.host}/ws/logs`);

        // Quando a conex√£o for aberta com sucesso
        ws.onopen = () => {
            console.log("‚úÖ Conex√£o WebSocket estabelecida!");
        };

        // Recebe e exibe as mensagens do servidor
        ws.onmessage = (event) => {
            if (event.data.startsWith("[ERRO]")) {
                logContainer.innerHTML = `<span style="color: red; font-weight: bold;">${event.data}</span>`;
                ws.close(); // Fecha a conex√£o WebSocket em caso de erro
            } else {
                logContainer.textContent += event.data + "\n";
                logContainer.scrollTop = logContainer.scrollHeight; // Scroll autom√°tico para o final
            }
        };

        // Lida com erros na conex√£o WebSocket
        ws.onerror = (error) => {
            console.error("‚ùå Erro no WebSocket:", error);
        };

        // Reconecta automaticamente caso o WebSocket seja fechado
        ws.onclose = (event) => {
            console.warn("üîå Conex√£o WebSocket encerrada. Tentando reconectar...");
            setTimeout(() => {
                ws = new WebSocket(`${protocol}//${window.location.host}/ws/logs`);
            }, 10000); // Tenta reconectar ap√≥s 10 segundos
        };
